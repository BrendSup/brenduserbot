# Copyright (C) 2019 The Raphielscape Company LLC.
#
# Licensed under the Raphielscape Public License, Version 1.c (the "License");
# you may not use this file except in compliance with the License.
#

from asyncio import sleep
from random import choice, getrandbits, randint
from re import sub
import time
import asyncio

from collections import deque

import requests

from cowpy import cow

from userbot import CMD_HELP, ZALG_LIST
from userbot.events import register
from userbot.modules.admin import get_user_from_event
from userbot.cmdhelp import CmdHelp

# ================= CONSTANT =================
EMOJIS = [
    "üòÇ",
    "üòÇ",
    "üëå",
    "‚úå",
    "üíû",
    "üëç",
    "üëå",
    "üíØ",
    "üé∂",
    "üëÄ",
    "üòÇ",
    "üëì",
    "üëè",
    "üëê",
    "üçï",
    "üí•",
    "üç¥",
    "üí¶",
    "üí¶",
    "üçë",
    "üçÜ",
    "üò©",
    "üòè",
    "üëâüëå",
    "üëÄ",
    "üëÖ",
    "üò©",
    "üö∞",
]

UWUS = [
    "(„Éª`œâ¬¥„Éª)",
    ";;w;;",
    "owo",
    "UwU",
    ">w<",
    "^w^",
    r"\(^o\) (/o^)/",
    "( ^ _ ^)‚à†‚òÜ",
    "(√¥_√¥)",
    "~:o",
    ";-;",
    "(*^*)",
    "(>_",
    "(‚ô•_‚ô•)",
    "*(^O^)*",
    "((+_+))",
]

FACEREACTS = [
    " ò‚Äø ò",
    "„Éæ(-_- )„Çû",
    "(„Å£Àò⁄°ÀòœÇ)",
    "(¬¥–∂ÔΩÄœÇ)",
    "( ‡≤†  ñÃØ ‡≤†)",
    "(¬∞ Õú ñÕ°¬∞)‚ï≠‚à©‚ïÆ",
    "(·µü‡∫∂Ô∏µ ·µü‡∫∂)",
    "(‡∏á„ÉÑ)‡∏ß",
    " ö(‚Ä¢ÔΩÄ",
    "(„Å£‚ñÄ¬Ø‚ñÄ)„Å§",
    "(‚ó†Ôπè‚ó†)",
    "( Õ°‡≤†  ñÃØ Õ°‡≤†)",
    "( ‡∞† Õü ñ ‡∞†)",
    "(‚à©ÔΩÄ-¬¥)‚äÉ‚îÅ‚òÜÔæü.*ÔΩ•ÔΩ°Ôæü",
    "(‚äÉÔΩ°‚Ä¢ÃÅ‚Äø‚Ä¢ÃÄÔΩ°)‚äÉ",
    "(._.)",
    "{‚Ä¢ÃÉ_‚Ä¢ÃÉ}",
    "(·µî·¥•·µî)",
    "‚ô®_‚ô®",
    "‚•Ä.‚•Ä",
    "ÿ≠Àö‡Ø∞Àö„Å• ",
    "(“Ç‚ó°_‚ó°)",
    "∆™(⁄ì◊≤)‚Äé∆™‚Äã‚Äã",
    "(„Å£‚Ä¢ÃÅÔΩ°‚Ä¢ÃÅ)‚ô™‚ô¨",
    "‚óñ·µî·¥•·µî‚óó ‚ô™ ‚ô´ ",
    "(‚òûÔæü„ÉÆÔæü)‚òû",
    "[¬¨¬∫-¬∞]¬¨",
    "(‘æ‚Ä∏ ‘æ)",
    "(‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà ÃëÃë",
    "„Éæ(¬¥„Äá`)Ôæâ‚ô™‚ô™‚ô™",
    "(‡∏á'ÃÄ-'ÃÅ)‡∏á",
    "·Éö(‚Ä¢ÃÅ‚Ä¢ÃÅ·Éö)",
    " ï ‚Ä¢ÃÅÿà‚Ä¢ÃÄ ‚Çé",
    "‚ô™‚ô™ „ÉΩ(Àá‚àÄÀá )„Çû",
    "—âÔºàÔæü–îÔæü—âÔºâ",
    "( Àá‡∑¥Àá )",
    "Îàà_Îàà",
    "(‡πë‚Ä¢ÃÅ ‚ÇÉ ‚Ä¢ÃÄ‡πë) ",
    "( Àò ¬≥Àò)‚ô• ",
    "‘Ö(‚âñ‚Äø‚âñ‘Ö)",
    "‚ô•‚Äø‚ô•",
    "‚óî_‚óî",
    "‚ÅΩ‚ÅΩ‡¨ò( Àä·µïÀã )‡¨ì‚Åæ‚Åæ",
    "‰πÅ( ‚óî ‡±™‚óî)„Äå      ‚îë(Ôø£–î Ôø£)‚îç",
    "( ‡∞†‡µ†‡∞† )Ôæâ",
    "Ÿ©(‡πè_‡πè)€∂",
    "‚îå(„ÜÜ„â®„ÜÜ) É",
    "‡∞†_‡∞†",
    "(„Å•ÔΩ°‚óï‚Äø‚Äø‚óïÔΩ°)„Å•",
    "(„Éé‡≤† ‚à©‡≤†)„ÉéÂΩ°( \\o¬∞o)\\",
    "‚Äú„ÉΩ(¬¥‚ñΩÔΩÄ)„Éé‚Äù",
    "‡ºº ‡ºé‡∫∂ ‡∑¥ ‡ºé‡∫∂‡ºΩ",
    "ÔΩ°Ôæü( Ôæü‡Æá‚Ä∏‡ÆáÔæü)ÔæüÔΩ°",
    "(„Å•Ôø£ ¬≥Ôø£)„Å•",
    "(‚äô.‚òâ)7",
    "·ïï( ·êõ )·ïó",
    "t(-_-t)",
    "(‡≤•‚å£‡≤•)",
    "„ÉΩ‡ºº ‡≤†Áõä‡≤† ‡ºΩÔæâ",
    "‡ºº‚àµ‡ºΩ ‡ºº‚ç®‡ºΩ ‡ºº‚ç¢‡ºΩ ‡ºº‚ç§‡ºΩ",
    "„Éü‚óèÔπè‚òâ„Éü",
    "(‚äô_‚óé)",
    "¬ø‚ìß_‚ìßÔÆå",
    "‡≤†_‡≤†",
    "(¬¥ÔΩ•_ÔΩ•`)",
    "·ï¶(√≤_√≥Àá)·ï§",
    "‚äôÔπè‚äô",
    "(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª",
    r"¬Ø\_(‚äôÔ∏ø‚äô)_/¬Ø",
    "Ÿ©‚óîÃØ‚óî€∂",
    "¬∞‚Äø‚Äø¬∞",
    "·ïô(‚áÄ‚Ä∏‚Üº‚Ä∂)·ïó",
    "‚äÇ(‚óâ‚Äø‚óâ)„Å§",
    "V‚Ä¢·¥•‚Ä¢V",
    "q(‚ùÇ‚Äø‚ùÇ)p",
    "‡≤•_‡≤•",
    "‡∏Ö^‚Ä¢Ôªå‚Ä¢^‡∏Ö",
    "‡≤•Ôπè‡≤•",
    "Ôºà ^_^ÔºâoËá™Ëá™oÔºà^_^ Ôºâ",
    "‡≤†‚Äø‡≤†",
    "„ÉΩ(¬¥‚ñΩ`)/",
    "·µí·¥•·µí#",
    "( Õ°¬∞ Õú ñ Õ°¬∞)",
    "‚î¨‚îÄ‚î¨Ôªø „Éé( „Çú-„Çú„Éé)",
    "„ÉΩ(¬¥„ÉºÔΩÄ)„Éé",
    "‚òú(‚åí‚ñΩ‚åí)‚òû",
    "Œµ=Œµ=Œµ=‚îå(;*¬¥–î`)Ôæâ",
    "(‚ï¨ ‡≤†Áõä‡≤†)",
    "‚î¨‚îÄ‚î¨‚É∞Õ°‚Äá(·µî·µï·µîÕú‚Äá)",
    "‚îª‚îÅ‚îª Ô∏µ„ÉΩ(`–î¬¥)ÔæâÔ∏µÔªø ‚îª‚îÅ‚îª",
    r"¬Ø\_(„ÉÑ)_/¬Ø",
    " ï·µî·¥•·µî î",
    "(`ÔΩ•œâÔΩ•¬¥)",
    " ï‚Ä¢·¥•‚Ä¢ î",
    "·Éö(ÔΩÄ„Éº¬¥·Éö)",
    " ï òÃÖÕú òÃÖ î",
    "Ôºà„ÄÄÔæü–îÔæüÔºâ",
    r"¬Ø\(¬∞_o)/¬Ø",
    "(ÔΩ°‚óï‚Äø‚óïÔΩ°)",
]

RUNS_STR = [
    "Hey! Hara gedirs…ôn?"
    "H…ô? N…ô? Qa√ßdƒ±lar?"
    "ZZzzZZzz ... N…ô oldu? yen…ô onlardƒ±r, he√ß d√º≈ü√ºnm…ôyin.",
    "Geri qayƒ±t!",
    "OneBot-un g…ôlm…ôsind…ôn √ß…ôkinin!",
    "Divara diqq…ôt yetirin!",
    "M…ôni onlarla t…ôk qoyma !!",
    "Qa√ßsan √∂l…ôrs…ôn.",
    "Zarafat edirs…ôn, m…ôn h…ôr yerd…ôy…ôm.",
    "Bunu etdiyiniz…ô g√∂r…ô pe≈üman olacaqsƒ±nƒ±z ...",
    "/Kickme d√ºym…ôsini d…ô sƒ±naya bil…ôrsiniz, …ôyl…ônc…ôli olduƒüunu s√∂yl…ôyirl…ôr.",
    "Get ba≈üqasƒ±nƒ± narahat et, burada he√ß kimin vecin…ô deyil.",
    "Qa√ßa bil…ôrs…ôn, ancaq gizl…ôn…ô bilm…ôzs…ôn.",
    "N…ô ed…ô bil…ôrs…ôn?",
    "S…ônin arxasƒ±ndayam ...",
    "Qonaqlarƒ±nƒ±z var!",
    "Bunu asanlƒ±qla v…ô ya √ß…ôtin bir ≈ü…ôkild…ô ed…ô bil…ôrik.",
    "S…ôn ba≈üa d√º≈üm√ºrs…ôn, el…ô deyilmi?",
    "Haha, daha yax≈üƒ± qa√ßsan!",
    "Xahi≈ü edir…ôm, m…ôn…ô n…ô q…ôd…ôr …ôh…ômiyy…ôt verdiyimi xatƒ±rlat?",
    "M…ôn sizin yerinizd…ô olsaydƒ±m daha s√ºr…ôtli qa√ßardƒ±m.",
    "Bu m√ºtl…ôq axtardƒ±ƒüƒ±mƒ±z robot.",
    "B…ôlk…ô ≈üans siz…ô g√ºl…ôc…ôk.",
    "M…ô≈ühur son s√∂zl…ôr.",
    "V…ô sonsuza q…ôd…ôr yox oldular, he√ß g√∂rm…ôdil…ôr.",
    "B…ôli b…ôli, indi / kick d√ºym…ôsini basƒ±n.",
    "Budur, bu √ºz√ºy√º g√∂t√ºr v…ô Mordora get.",
    "R…ôvay…ôt…ô g√∂r…ô h…ôl…ô d…ô i≈ül…ôyirl…ôr ...",
    "Harry Potter'dan f…ôrqli olaraq, valideynl…ôriniz sizi m…ônd…ôn qoruya bilm…ôzl…ôr.",
    "Qorxu q…ôz…ôb…ô, q…ôz…ôb nifr…ôt…ô, nifr…ôt aƒürƒ±ya aparar. Qorxu i√ßind…ô qa√ßmaƒüa davam ets…ôn"
    "Siz n√∂vb…ôti Vader ola bil…ôrsiniz.",
    "√áox hesablama apardƒ±qdan sonra f…ôndl…ôr…ô maraƒüƒ±mƒ±n tam 0 olduƒüuna q…ôrar verdim."
    "∆èfsan…ô h…ôl…ô d…ô √ßalƒ±≈üdƒ±qlarƒ±nƒ± s√∂yl…ôdi."
    "Davam et, s…ôni burada ist…ôdiyimiz…ô …ômin deyil…ôm.",
    "S…ôn sehrbazsan - Oh. G√∂zl…ô. Harry deyils…ôn, davam et.",
    "D…ôhlizd…ô qa√ßma!",
    "G√∂r√º≈ü…ôk balam.",
    "ƒ∞tl…ôri kim √ß√∂l…ô buraxdƒ±?"
    "G√ºlm…ôli, √ß√ºnki he√ß kimin vecin…ô deyil.",
    "Oh, n…ô itki. M…ôn bunu sevirdim.",
    "A√ßƒ±ƒüƒ± canƒ±m, vecim…ô deyil.",
    "S√ºd√ºm b√ºt√ºn ki≈üil…ôri h…ôy…ôt…ô √ß…ôkir ... Daha s√ºr…ôtli qa√ß!",
    "H…ôqiq…ôti sil…ô bilm…ôzs…ôn!",
    "√áoxdan …ôvv…ôl kims…ô onu √ßox uzaq bir qalaktikada taxa bil…ôrdi. Ancaq artƒ±q yox.",
    "Hey, onlara bax! Qa√ßƒ±lmaz banhammerd…ôn qa√ßƒ±rlar ... N…ô q…ôd…ôr sevimli",
    "Inn …ôvv…ôl vuruldu. Bunu ed…ôc…ôm",
    "Aƒü dov≈üanƒ±n arxasƒ±nda n…ô edirs…ôn?",
    "Doktorunun dediyi kimi ... CACHE!",
]

HELLOSTR = [
    "Salam var!",
    "Nec…ôs…ôn'?",
    "'Hey n…ô ba≈ü verir?",
    "Salam, salam, salam!",
    "Salam, kim var? M…ôn danƒ±≈üƒ±ram.",
    "Bunun kim olduƒüunu bilirsiniz",
    "Hey Yo!"
    "N…ô var n…ô yox.",
    "Salam salam salam!",
    "Salam, g√ºn…ô≈ü i≈üƒ±ƒüƒ±!",
    "Hey, n…ô var, salam!",
    "Nec…ô gedir balaca c√ºc…ô?"
    "N…ô yax≈üƒ±dƒ±r!"
    "Salam, birinci sinif brat!",
    "G…ôl barƒ±≈üaq!",
    "Salam dostum!",
    "Salam!",
]

SHGS = [
    "‚îê(¬¥–¥ÔΩÄ)‚îå",
    "‚îê(¬¥ÔΩûÔΩÄ)‚îå",
    "‚îê(¬¥„ÉºÔΩÄ)‚îå",
    "‚îê(Ôø£„ÉòÔø£)‚îå",
    "‚ïÆ(‚ïØ‚àÄ‚ï∞)‚ï≠",
    "‚ïÆ(‚ïØ_‚ï∞)‚ï≠",
    "‚îê(¬¥–¥`)‚îå",
    "‚îê(¬¥‚àÄÔΩÄ)‚îå",
    " Ö(ÃÅ‚ó°‚óù) É",
    "‚îê(ÔæüÔΩûÔæü)‚îå",
    "‚îê('–¥')‚îå",
    "‚îê(‚ÄòÔΩû`;)‚îå",
    "„Éò(¬¥ÔºçÔΩÄ;)„Éò",
    "‚îê( -‚Äú-)‚îå",
    " ÖÔºà¬¥‚óî‡±™‚óîÔºâ É",
    "„ÉΩ(„ÇúÔΩû„Çúo)„Éé",
    "„ÉΩ(~ÔΩû~ )„Éé",
    "‚îê(~„Éº~;)‚îå",
    "‚îê(-„ÄÇ„Éº;)‚îå",
    r"¬Ø\_(„ÉÑ)_/¬Ø",
    r"¬Ø\_(‚äô_ ñ‚äô)_/¬Ø",
    r"¬Ø\_‡ºº ‡≤• ‚Äø ‡≤• ‡ºΩ_/¬Ø",
    "‰πÅ( ‚Å∞Õ°  ƒπÃØ ‚Å∞Õ° ) „Ñè",
]

CRI = [
    "ÿ£‚Äøÿ£",
    "‚ï•Ôπè‚ï•",
    "(;Ôπè;)",
    "(ToT)",
    "(‚î≥–î‚î≥)",
    "(‡≤•Ôπè‡≤•)",
    "ÔºàÔºõ„Å∏ÔºöÔºâ",
    "(TÔºøT)",
    "ÔºàœÄ„ÉºœÄÔºâ",
    "(Ôº¥‚ñΩÔº¥)",
    "(‚ãüÔπè‚ãû)",
    "ÔºàÔΩâ–îÔΩâÔºâ",
    "(¬¥–î‚äÇ„ÉΩ",
    "(;–î;)",
    "Ôºà>Ôπè<Ôºâ",
    "(T–¥T)",
    "(„Å§Ôπè‚äÇ)",
    "‡ºº‚òØÔπè‚òØ‡ºΩ",
    "(„ÉéÔπè„ÉΩ)",
    "(„ÉéA„ÉΩ)",
    "(‚ï•_‚ï•)",
    "(T‚åìT)",
    "(‡ºé‡∫∂‚åë‡ºé‡∫∂)",
    "(‚òçÔπè‚Å∞)ÔΩ°",
    "(‡≤•_ ñ‡≤•)",
    "(„Å§–¥‚äÇ)",
    "(‚âñÕû_‚âñÃ•)",
    "(‡ÆáÔπè‡Æá`ÔΩ°)",
    "‡ºº‡≤¢_‡≤¢‡ºΩ",
    "‡ºº ‡ºé‡∫∂ ‡∑¥ ‡ºé‡∫∂‡ºΩ",
]

SLAP_TEMPLATES = [
    "{victim} istifad…ô√ßisini {item} il…ô {hits} .",
    "{victim} istifad…ô√ßisini {item} il…ô y√ºz√ºn…ô {hits} .",
    "{victim} istifad…ô√ßisini {item} il…ô biraz {hits} .",
    "{victim} istifad…ô√ßisini {item} {throws} .",
    "{victim} istifad…ô√ßisini {item} ile y√ºz√ºn…ô {throws} .",
    "{victim} istifad…ô√ßisiyi doƒüru {item} fƒ±rlatƒ±yor.",
    "{victim} x…ôst…ôsin…ô {item} il…ô d√∂y√ºr.",
    "{victim} istifad…ô√ßisini yer…ô s…ôrib ard arda {item} il…ô {hits} .",
    "{item} alaraq {victim} {hits}.",
    "{victim} istifad…ô√ßisini kresloya baƒülayƒ±b {item} {throws} .",
    "{victim} istifad…ô√ßisin…ô lava basaraq onu lava il…ô √ºzm…ôyi √∂yr…ônm…ôy…ô imkan verir."
]

ITEMS = [
    "d…ômir qazan",
    "b√∂y√ºk alabalƒ±q",
    "beysbol sopasƒ±",
    "cricket yarasa",
    "taxta √ßubuq",
    "dƒ±rnaq",
    "Printer",
    "k√ºr…ôk",
    "boru monitoru",
    "fizika kitabƒ±",
    "toster",
    "Richard Stallmanƒ±n portreti",
    "televiziya",
    "be≈ü tonluq y√ºk ma≈üƒ±nƒ±",
    "Kanal lenti",
    "kitab",
    "noutbuk",
    "k√∂hn…ô TV",
    "qayalƒ± √ßuval",
    "g√∂y qur≈üaƒüƒ± alabalƒ±ƒüƒ±",
    "plastik toyuq",
    "m…ôhsul",
    "yanƒüƒ±n S√∂nd√ºr…ôn",
    "aƒüƒ±r da≈ü",
    "kir yƒ±ƒüƒ±nƒ±",
    "arƒ± p…ôt…ôyi",
    "√ß√ºr√ºm√º≈ü …ôt par√ßasƒ±",
    "ayƒ±",
    "ton k…ôrpic",
]

THROW = [
    "atƒ±r",
    "fƒ±rlatƒ±r",
    "tullayƒ±r",
    "Yaƒüƒ±r",
]

HIT = [
    "vurur",
    "B…ôrk vurur",
    "t…ôpikl…ôyir",
    "yumruqluyur",
    "ke√ßirir",
]

# ===========================================

@register(outgoing=True, pattern="^.hayvan ?(.*)")
async def hayvan(e):
    arg = e.pattern_match.group(1)
    if arg == "pisik":
        args = "cat"
    elif arg == "it":
        args = "dog"
    elif arg == "qus":
        args = "birb"
    elif arg == "qurd":
        args = "fox"
    elif arg == "panda":
        args = "panda"
    else:
        arg = "pisik"
        args = "cat"

    foto = requests.get(f'https://some-random-api.ml/img/{args}').json()["link"]
    await e.delete()
    await e.client.send_message(
        e.chat_id,
        f"`Random bir {arg} ≈ü…ôkili atƒ±r`",
        file=foto
    )

@register(outgoing=True, pattern="^.qerar$")
async def karar(e):
    msaj = ""
    if e.reply_to_msg_id:
        rep = await e.get_reply_message()
        replyto = rep.id
        msaj += f"[Dosdum](tg://user?id={rep.from_id}), "
    else:
        e.edit("`Z…ôhm…ôt olmasa bir mesaja cavab verin`")
        return
    yesno = requests.get('https://yesno.wtf/api').json()
    if yesno["answer"] == "yes":
        cevap = "b…ôli"
    else:
        cevap = "xeyr"
    msaj += f"G√ºman edir…ôm ki {cevap} dey…ôc…ôm."

    await e.delete()
    await e.client.send_message(
        e.chat_id,
        msaj,
        reply_to=replyto,
        file=yesno["image"]
    )

@register(outgoing=True, pattern=r"^.(\w+)say (.*)")
async def univsaye(cowmsg):
    arg = cowmsg.pattern_match.group(1).lower()
    text = cowmsg.pattern_match.group(2)

    if arg == "cow":
        arg = "default"
    if arg not in cow.COWACTERS:
        return
    cheese = cow.get_cow(arg)
    cheese = cheese()

    await cowmsg.edit(f"`{cheese.milk(text).replace('`', '¬¥')}`")


@register(outgoing=True, pattern="^:/$", ignore_unsafe=True)
async def kek(keks):
    uio = ["/", "\\"]
    for i in range(1, 15):
        time.sleep(0.3)
        await keks.edit(":" + uio[i % 2])


@register(pattern="^.slap(?: |$)(.*)", outgoing=True)
async def who(event):
    replied_user = await get_user_from_event(event)
    if replied_user:
        replied_user = replied_user[0]
    else:
        return
    caption = await slap(replied_user, event)

    try:
        await event.edit(caption)

    except BaseException:
        await event.edit(
            "`Bu adama yumruq ata bilmir…ôm, yanƒ±mda √ßubuq v…ô da≈ü g√∂t√ºrm…ôliy…ôm !!`"
        )


async def slap(replied_user, event):
    user_id = replied_user.id
    first_name = replied_user.first_name
    username = replied_user.username

    if username:
        slapped = "@{}".format(username)
    else:
        slapped = f"[{first_name}](tg://user?id={user_id})"

    temp = choice(SLAP_TEMPLATES)
    item = choice(ITEMS)
    hit = choice(HIT)
    throw = choice(THROW)

    caption = "Brend " + temp.format(
        victim=slapped, item=item, hits=hit, throws=throw)

    return caption


@register(outgoing=True, pattern="^-_-$", ignore_unsafe=True)
async def lol(lel):
    okay = "-_-"
    for i in range(10):
        okay = okay[:-1] + "_-"
        await lel.edit(okay)


@register(outgoing=True, pattern="^;_;$", ignore_unsafe=True)
async def fun(e):
    t = ";_;"
    for j in range(10):
        t = t[:-1] + "_;"
        await e.edit(t)


@register(outgoing=True, pattern="^.fp$")
async def facepalm(e):
    """ Utanmaq  ü§¶‚Äç‚ôÇ """
    await e.edit("ü§¶‚Äç‚ôÇ")


@register(outgoing=True, pattern="^.cry$")
async def cry(e):
    """ bunu yaparsan, her zaman aƒülarƒ±m !! """
    await e.edit(choice(CRI))


@register(outgoing=True, pattern="^.cp(?: |$)(.*)")
async def copypasta(cp_e):
    """ copypasta """
    textx = await cp_e.get_reply_message()
    message = cp_e.pattern_match.group(1)

    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await cp_e.edit("`üòÇBanaüíØBIR‚úåÔ∏èmEüÖ±Ô∏èInüëêVerüëè`")
        return

    reply_text = choice(EMOJIS)
    b_char = choice(message).lower()
    for owo in message:
        if owo == " ":
            reply_text += choice(EMOJIS)
        elif owo in EMOJIS:
            reply_text += owo
            reply_text += choice(EMOJIS)
        elif owo.lower() == b_char:
            reply_text += "üÖ±Ô∏è"
        else:
            if bool(getrandbits(1)):
                reply_text += owo.upper()
            else:
                reply_text += owo.lower()
    reply_text += choice(EMOJIS)
    await cp_e.edit(reply_text)


@register(outgoing=True, pattern="^.vapor(?: |$)(.*)")
async def vapor(vpr):
    reply_text = list()
    textx = await vpr.get_reply_message()
    message = vpr.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await vpr.edit("`M…ôn…ô 1 m…ôtin ver!`")
        return

    for charac in message:
        if 0x21 <= ord(charac) <= 0x7F:
            reply_text.append(chr(ord(charac) + 0xFEE0))
        elif ord(charac) == 0x20:
            reply_text.append(chr(0x3000))
        else:
            reply_text.append(charac)

    await vpr.edit("".join(reply_text))


@register(outgoing=True, pattern="^.str(?: |$)(.*)")
async def stretch(stret):
    textx = await stret.get_reply_message()
    message = stret.text
    message = stret.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await stret.edit("`M…ôn…ô 1 m…ôtin ver!`")
        return

    count = randint(3, 10)
    reply_text = sub(r"([aeiouAEIOUÔΩÅÔΩÖÔΩâÔΩèÔΩïÔº°Ôº•Ôº©ÔºØÔºµ–∞–µ–∏–æ—É—é—è—ã—ç—ë])", (r"\1" * count),
                     message)
    await stret.edit(reply_text)


@register(outgoing=True, pattern="^.zal(?: |$)(.*)")
async def zal(zgfy):
    reply_text = list()
    textx = await zgfy.get_reply_message()
    message = zgfy.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await zgfy.edit(
            "`Ôº¢Õ¨Ã∫ÔΩÅÕëÃ†ÔΩéÃµÃâÔΩÅÃ¨Õú ÔΩÇÕîÃ∂ÔΩâÃºÕöÔΩíÕàÕû ÔΩçÃºÕòÔΩÖÃ®ÃùÔΩîÕîÕôÔΩâÕÆÃ¢ÔΩéÃúÕó ÔΩñÕ¢ÕúÔΩÖÕêÃóÔΩíÕÆÃ¥`"
        )
        return

    for charac in message:
        if not charac.isalpha():
            reply_text.append(charac)
            continue

        for _ in range(0, 3):
            charac += choice(ZALG_LIST[randint(0,2)]).strip()

        reply_text.append(charac)

    await zgfy.edit("".join(reply_text))
    

@register(outgoing=True, pattern="^.hi$")
async def hoi(hello):
    await hello.edit(choice(HELLOSTR))


@register(outgoing=True, pattern="^.owo(?: |$)(.*)")
async def faces(owo):
    textx = await owo.get_reply_message()
    message = owo.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await owo.edit("` UwU bana bir metin ver! `")
        return

    reply_text = sub(r"(r|l)", "w", message)
    reply_text = sub(r"(R|L)", "W", reply_text)
    reply_text = sub(r"n([aeiou])", r"ny\1", reply_text)
    reply_text = sub(r"N([aeiouAEIOU])", r"Ny\1", reply_text)
    reply_text = sub(r"\!+", " " + choice(UWUS), reply_text)
    reply_text = reply_text.replace("ove", "uv")
    reply_text += " " + choice(UWUS)
    await owo.edit(reply_text)


@register(outgoing=True, pattern="^.react$")
async def react_meme(react):
    await react.edit(choice(FACEREACTS))


@register(outgoing=True, pattern="^.shg$")
async def shrugger(shg):
    r""" ¬Ø\_(„ÉÑ)_/¬Ø """
    await shg.edit(choice(SHGS))


@register(outgoing=True, pattern="^.run$")
async def runner_lol(run):
    await run.edit(choice(RUNS_STR))


@register(outgoing=True, pattern="^oof$")
async def oof(e):
    t = "oof"
    for j in range(16):
        t = t[:-1] + "of"
        await e.edit(t)

                      
@register(outgoing=True, pattern="^Oof$")
async def Oof(e):
    t = "Oof"
    for j in range(16):
        t = t[:-1] + "of"
        await e.edit(t)


@register(outgoing=True, pattern="^skrrt$")
async def oof(e):
    t = "skrrt"
    for j in range(16):
        t = t[:-1] + "rt"
        await e.edit(t)
        

@register(outgoing=True, pattern="^Skrrt$")
async def oof(e):
    t = "Skrrt"
    for j in range(16):
        t = t[:-1] + "rt"
        await e.edit(t)


@register(outgoing=True, pattern="^.fuk")
async def fuk(event):
    if event.fwd_from:
        return
    animation_interval = 0.1
    animation_ttl = range(0, 101)
    animation_chars = [
            "üçÜ       üçëÔ∏è",
            "üçÜ     üçëÔ∏è",
            "üçÜ  üçëÔ∏è",
            "üçÜüçëÔ∏èüí¶"
    ]
    for i in animation_ttl:
        await asyncio.sleep(animation_interval)
        await event.edit(animation_chars[i % 4])


@register(outgoing=True, pattern="^.kalp (.*)")
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    deq = deque(list("Ô∏è‚ù§Ô∏èüß°üíõüíöüíôüíúüñ§"))
    for _ in range(32):
        await asyncio.sleep(0.1)
        await event.edit("".join(deq))
        deq.rotate(1)
    await event.edit("‚ù§Ô∏èüß°üíõ" + input_str + "üíöüíôüíúüñ§")


@register(outgoing=True, pattern="^.10iq$")
async def iqless(e):
    await e.edit(
    "D√ú√úT D√ú√úTT A√áIQ YOLU A√áIQ HADI ≈ûER PAR√áALARI YOLU A√áIR \n"
    "HADƒ∞ BAK ∆èlil G√úZ∆èRL∆èRƒ∞ BURADA HADƒ∞ D√ú√úTTT ‚ôøÔ∏è BAK \n"
    "SINIRLI DOST HADƒ∞ HADƒ∞ƒ∞ D√ú√úT D√úTT Bƒ∞ƒ∞ƒ∞PP YOLU A√áIB \n"
    "HADƒ∞ BE S√úR∆èTLƒ∞ OLL D√ú√úTT Bƒ∞ƒ∞ƒ∞PPP ‚ôøÔ∏è‚ôøÔ∏è Pi≈ümi≈ü s√ºr…ôt …ôlildir \n"
    "Bƒ∞ƒ∞ƒ∞ƒ∞PPP BIƒ∞ƒ∞ƒ∞ƒ∞PPP D√ú√úTTT ‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è BAK ARTIIO N√ñMR∆èL∆èRƒ∞ \n"
    "Bƒ∞ƒ∞ƒ∞ƒ∞PPP Bƒ∞ƒ∞ƒ∞ƒ∞ƒ∞PPP D√ú√ú√úTTT ‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è BAK ARTIYO SAYILARI \n"
    "A√á, YOLU A√á P√ú√ú√ú√ú REZƒ∞LL D√ú√ú√úTT ‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è \n"
    "‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è BAXIN √áOX D√ú≈û√úN√úN, D∆èLƒ∞ D∆èLƒ∞Dƒ∞R \n"
    "A√á YOLU DUTDUTDURURURUDUTTT‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è \n"
    "‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏èBEYƒ∞NL∆èRƒ∞ YOX OLDU BUNLARIN."
    )
    
    
@register(outgoing=True, pattern="^.zarafat$")
async def mizahshow(e):
    await e.edit(
    "‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏èZarafat ≈ûowwüò®üò®üò®üò®üò±üò±üò±üò±üò± \n"
    "üò±üò±‚ö†Ô∏è‚ö†Ô∏è üòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇüò±üòµ \n"
    "üòÇüòÇüëçüëçüëçüëçüëçüëçüëçüëçüëçüëçüëçüëçüëç Zarafat \n"
    "Zor zarafat idi ahahahah \n"
    "AHAHAHAHAHAHHAHAHAHAHAHAHAHAHAHAHAHHAHAHAHAHA \n"
    "HAHAHAHAHAHAHHAHAHAHAHAHAHAüòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇ \n"
    "üòÇ ALA √ñLD√úM G√úLM∆èKD∆èN \n"
    "hHALALDI S∆èM∆è ‚úîÔ∏è‚úîÔ∏è‚úîÔ∏è‚úîÔ∏è‚úîÔ∏è‚úîÔ∏è‚úîÔ∏è‚úîÔ∏èüëèüëèüëèüëèüëèüëèüëèüëè \n"
    "üëè BOMBA ZARAFATüëèüëèüëèüëèüëèüòÇüòÇüòÇüòÇ \n"
    "üòÇüòÇüòÇüòÇüòÇüòÇ‚ö†Ô∏è \n"
    "üíØüíØüíØüíØüíØüíØüíØüíØüíØ \n"
    "ALA KOPYA Bƒ∞Zƒ∞YE üòÇüòÇüòÇüëèüëè \n"
    "üíØüíØ‚ö†Ô∏è‚ö†Ô∏è‚ôøÔ∏èYOL POSTUNUN SAHƒ∞Bƒ∞Nƒ∞ V∆è M√úDAFƒ∞∆è√áƒ∞L∆èRƒ∞Nƒ∞ A√áIN \n"
    "G∆èLƒ∞R ‚ôøÔ∏è‚ôøÔ∏è DUTTÔ∏è \n"
    "D√ú√ú√ú√úT‚ôøÔ∏èD√ú√úT‚ôøÔ∏èüíØüíØ‚ö†Ô∏è \n"
    "‚ôøÔ∏èALALAALALALALA ‚ôøÔ∏è \n"
    "CJWJCJWJXJJWDJJQUXJAJXJAJXJWJFJWJXJAJXJWJXJWJFIWIXJQJJQJASJAXJ \n"
    "AJXJAJXJJAJXJWJFWJJFWIIFIWICIWIFIWICJAXJWJFJEICIIEICIEIFIWICJSXJJS \n"
    "CJEIVIAJXBWJCJIQICIWJXüíØüíØüíØüíØüíØüíØüòÇüòÇüòÇüòÇüòÇüòÇüòÇ \n"
    "üòÇ‚ö†Ô∏èüòÇüòÇüòÇüòÇüòÇüòÇ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏èüòÇüòÇüòÇüòÇ‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏èüòÖüòÖ \n"
    "üòÖüòÇüëèüíØ‚ö†Ô∏èüëè‚ôøÔ∏èüö®"
    )    


@register(outgoing=True, pattern="^.moon$")
async def moon(event):
    deq = deque(list("üåóüåòüåëüåíüåìüåîüåïüåñ"))
    try:
        for x in range(32):
            await sleep(0.1)
            await event.edit("".join(deq))
            deq.rotate(1)
    except BaseException:
        return


@register(outgoing=True, pattern="^.clock$")
async def clock(event):
    deq = deque(list("üïôüïòüïóüïñüïïüïîüïìüïíüïëüïêüïõ"))
    try:
        for x in range(32):
            await sleep(0.1)
            await event.edit("".join(deq))
            deq.rotate(1)
    except BaseException:
        return


@register(outgoing=True, pattern="^.mock(?: |$)(.*)")
async def spongemocktext(mock):
    reply_text = list()
    textx = await mock.get_reply_message()
    message = mock.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await mock.edit("`M…ôn…ô 1 m…ôtin ver!`")
        return

    for charac in message:
        if charac.isalpha() and randint(0, 1):
            to_app = charac.upper() if charac.islower() else charac.lower()
            reply_text.append(to_app)
        else:
            reply_text.append(charac)

    await mock.edit("".join(reply_text))


@register(outgoing=True, pattern="^.clap(?: |$)(.*)")
async def claptext(memereview):
    textx = await memereview.get_reply_message()
    message = memereview.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await memereview.edit("`Hah, m…ônasƒ±zdƒ± amma t…ôbrik edir…ôm!`")
        return
    reply_text = "üëè "
    reply_text += message.replace(" ", " üëè ")
    reply_text += " üëè"
    await memereview.edit(reply_text)


@register(outgoing=True, pattern=r"^.f (.*)")
async def payf(event):
    paytext = event.pattern_match.group(1)
    pay = "{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}".format(
        paytext * 8, paytext * 8, paytext * 2, paytext * 2, paytext * 2,
        paytext * 6, paytext * 6, paytext * 2, paytext * 2, paytext * 2,
        paytext * 2, paytext * 2)
    await event.edit(pay)

@register(outgoing=True, pattern=r"^.ƒü (.*)")
async def payg(event):
    g = """
     „Ö§ 
          ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è

          ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è
     ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è
   ‚ù§Ô∏è‚ù§Ô∏è                     ‚ù§Ô∏è‚ù§Ô∏è
 ‚ù§Ô∏è‚ù§Ô∏è
‚ù§Ô∏è‚ù§Ô∏è                ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è
‚ù§Ô∏è‚ù§Ô∏è                ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è
 ‚ù§Ô∏è‚ù§Ô∏è                        ‚ù§Ô∏è‚ù§Ô∏è
   ‚ù§Ô∏è‚ù§Ô∏è                     ‚Ää‚ù§Ô∏è‚ù§Ô∏è
     ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è
          ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è
"""
    paytext = event.pattern_match.group(1)
    await event.edit(g.replace('‚ù§Ô∏è', paytext))

@register(outgoing=True, pattern=r"^.bo[s≈ü]luk")
async def bosluk(event):
    await event.delete()
    await event.reply('„Ö§')

@register(outgoing=True, pattern="^.lfy (.*)")
async def let_me_google_that_for_you(lmgtfy_q):
    textx = await lmgtfy_q.get_reply_message()
    qry = lmgtfy_q.pattern_match.group(1)
    if qry:
        query = str(qry)
    elif textx:
        query = textx
        query = query.message
    query_encoded = query.replace(" ", "+")
    lfy_url = f"http://lmgtfy.com/?s=g&iie=1&q={query_encoded}"
    payload = {'format': 'json', 'url': lfy_url}
    r = requests.get('http://is.gd/create.php', params=payload)
    await lmgtfy_q.edit(f"ƒ∞≈üte, keyfine bak.\
    \n[{query}]({r.json()['shorturl']})")


@register(pattern=r".scam(?: |$)(.*)", outgoing=True)
async def scam(event):
    options = [
        'typing', 'contact', 'game', 'location', 'voice', 'round', 'video',
        'photo', 'document', 'cancel'
    ]
    input_str = event.pattern_match.group(1)
    args = input_str.split()
    if len(args) == 0:
        scam_action = choice(options)
        scam_time = randint(30, 60)
    elif len(args) == 1:
        try:
            scam_action = str(args[0]).lower()
            scam_time = randint(30, 60)
        except ValueError:
            scam_action = choice(options)
            scam_time = int(args[0])
    elif len(args) == 2:
        scam_action = str(args[0]).lower()
        scam_time = int(args[1])
    else:
        await event.edit("`Invalid Syntax !!`")
        return
    try:
        if (scam_time > 0):
            await event.delete()
            async with event.client.action(event.chat_id, scam_action):
                await sleep(scam_time)
    except BaseException:
        return


@register(pattern=r".type(?: |$)(.*)", outgoing=True)
async def typewriter(typew):
    textx = await typew.get_reply_message()
    message = typew.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await typew.edit("`M…ôn…ô 1 m…ôtin ver!`")
        return
    sleep_time = 0.03
    typing_symbol = "|"
    old_text = ""
    await typew.edit(typing_symbol)
    await sleep(sleep_time)
    for character in message:
        old_text = old_text + "" + character
        typing_text = old_text + "" + typing_symbol
        await typew.edit(typing_text)
        await sleep(sleep_time)
        await typew.edit(old_text)
        await sleep(sleep_time)

CmdHelp('memes').add_command(
    'hayvan', 'Pi≈üik/it/panda/qu≈ü/qurd', 'Random heyvan fotosu atƒ±r.'
).add_command(
    'cowsay', None, 'N…ôs…ô dey…ôn in…ôk)'
).add_command(
    ':/', None, 'Animasiyon.'
).add_command(
    'qerar', None, 'Q…ôrar verin.'
).add_command(
    '-_-', None, 'Anladƒ±m.'
).add_command(
    ';_;', None, '5 d…ôqiq…ô sevgilini g√∂rm…ôd…ôn fikirl…ô≈ü.'
).add_command(
    'cp', '<yanƒ±t>', 'Emoji falan …ôlav…ô edir.'
).add_command(
    'vapor', '<mesaj/yanƒ±tlama>', 'Vaporla≈ütƒ±rƒ±n!'
).add_command(
    'str', '<yazƒ±>', 'Yazƒ±yƒ± uzad.'
).add_command(
    '10iq', None, 'Selax mesaj yazƒ±r.'
).add_command(
    'zarafat', None, 'Animasiyon'
).add_command(
    'zal', '<yanƒ±tlama/mesaj>', '√áox m√ºr…ôkk…ôb! H…ôr ≈üey √ßox m√ºr…ôkk…ôbdir.'
).add_command(
    'oof', None, 'yax≈üƒ±da bildim'
).add_command(
    'skrrt', None, 'sƒ±kƒ±rt'
).add_command(
    'fuk', None, '+18'
).add_command(
    'kalp', '<ad>', 'Sevginizi g√∂st…ôrin.'
).add_command(
    'fp', None, 'Utanmaq.'
).add_command(
    'moon', None, 'Ay animasiyasƒ±.'
).add_command(
    'clock', None, 'Saat animasyonu'
).add_command(
    'hi', None, 'Salam verin.'
).add_command(
    'owo', None, 'Lolist Selin kimi'
).add_command(
    'react', None, 'Ayzƒ±rbotu h…ôr ≈üey…ô reaksiya verin.'
).add_command(
    'slap', '<yanƒ±tlama>', 'T…ôsad√ºfi obyektl…ôrl…ô s√ºr√º≈üd√ºrm…ôk √º√ß√ºn mesajƒ± cavablandƒ±rƒ±n.'
).add_command(
    'cry', None, 'Aƒülamaq ist…ôyirs…ôn?'
).add_command(
    'shg', None, '¬Ø\_(„ÉÑ)_/¬Ø'
).add_command(
    'run', None, 'Ko≈ü!'
).add_command(
    'mock', '<yanƒ±tlama/mesaj>', 'Bunu et v…ô h…ôqiqi …ôyl…ônc…ôni tap.'
).add_command(
    'clap', None, 'Animasiya!'
).add_command(
    'f', '<mesaj>', 'F'
).add_command(
    'type', '<yazƒ±>', 'Daktilo Kimi m…ôtn yazƒ±n.'
).add_command(
    'lfy', '<sual>', 'Google-un sizin √º√ß√ºn bunu axtarmasƒ±na icaz…ô verin.'
).add_command(
    'scam', '<h…ôr…ôk…ôt> <vaxt>', 'Saxta h…ôr…ôk…ôtl…ôr yaradƒ±n.\nCari y…ôr…ôk…ôtl…ôr: (typing, contact, game, location, voice, round, video, photo, document, cancel)'
).add_command(
    'lfy', '<sual>', 'Google-un sizin √º√ß√ºn bunu axtarmasƒ±na icaz…ô verin.'
).add_command(
    'bo≈üluk', None, 'Bo≈ü mesaj.'
).add_command(
    'ƒü', '<metin>', 'ƒû'
).add()
