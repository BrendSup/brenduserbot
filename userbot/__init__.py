import os
from re import compile
from sys import version_info
from logging import basicConfig, getLogger, INFO, DEBUG
from distutils.util import strtobool as sb
from pylast import LastFMNetwork, md5
from pySmartDL import SmartDL
from dotenv import load_dotenv
from requests import get
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.sync import TelegramClient, custom
from telethon.sessions import StringSession
from telethon.events import callbackquery, InlineQuery, NewMessage
from math import ceil

load_dotenv("config.env")

CONSOLE_LOGGER_VERBOSE = sb(os.environ.get("CONSOLE_LOGGER_VERBOSE", "False"))

ASYNC_POOL = []

if CONSOLE_LOGGER_VERBOSE:
    basicConfig(
        format="%(asctime)s - @BrendUserBot - %(levelname)s - %(message)s",
        level=DEBUG,
    )
else:
    basicConfig(format="%(asctime)s - @BrendUserBot - %(levelname)s - %(message)s",
                level=INFO)
LOGS = getLogger(__name__)

if version_info[0] < 3 or version_info[1] < 6:
    LOGS.info("∆èn azƒ± python 3.6 versiyanƒ±z olmalƒ±dƒ±r."
              "Bird…ôn √ßox x√ºsusiyy…ôt bundan asƒ±lƒ±dƒ±r. Bot baƒülanƒ±r.")
    quit(1)

CONFIG_CHECK = os.environ.get(
    "___________LUTFEN_______BU_____SATIRI_____SILIN__________", None)

if CONFIG_CHECK:
    LOGS.info(
        "Xahi≈ü edir…ôm config.env faylƒ±ndan ilk hashtagda g√∂st…ôril…ôn s…ôtri silin"
    )
    quit(1)

LANGUAGE = os.environ.get("LANGUAGE", "DEFAULT").upper()

if not LANGUAGE in ["EN", "TR", "AZ"]:
    LOGS.info("Nam…ôlum bir dil yazdƒ±nƒ±z. Buna g√∂r…ô DEFAULT istifad…ô olunur.")
    LANGUAGE = "DEFAULT"
    
BREND_VERSION = "v1.9.0"

API_KEY = os.environ.get("API_KEY", None)
API_HASH = os.environ.get("API_HASH", None)

SILINEN_PLUGIN = {}
STRING_SESSION = os.environ.get("STRING_SESSION", None)

# Giri≈ü Kanalƒ± / Qrup ID konfiqurasiyasƒ±.
BOTLOG_CHATID = int(os.environ.get("BOTLOG_CHATID", None))

# UserBot giri≈ü x√ºsusiyy…ôti.
BOTLOG = sb(os.environ.get("BOTLOG", "False"))
LOGSPAMMER = sb(os.environ.get("LOGSPAMMER", "False"))

# Hey! Bu bir botdur. Narahat olma ;)
PM_AUTO_BAN = sb(os.environ.get("PM_AUTO_BAN", "False"))

# Yenil…ôn…ôn √º√ß√ºn Heroku hesabƒ± m…ôlumatlarƒ±.
HEROKU_MEMEZ = sb(os.environ.get("HEROKU_MEMEZ", "False"))
HEROKU_APPNAME = os.environ.get("HEROKU_APPNAME", None)
HEROKU_APIKEY = os.environ.get("HEROKU_APIKEY", None)

UPSTREAM_REPO_URL = "https://github.com/brendsupport/brenduserbot.git"

CONSOLE_LOGGER_VERBOSE = sb(os.environ.get("CONSOLE_LOGGER_VERBOSE", "False"))

DB_URI = os.environ.get("DATABASE_URL", "sqlite:///brend.db")

OCR_SPACE_API_KEY = os.environ.get("OCR_SPACE_API_KEY", None)

REM_BG_API_KEY = os.environ.get("REM_BG_API_KEY", None)

AUTO_PP = os.environ.get("AUTO_PP", None)

WARN_LIMIT = int(os.environ.get("WARN_LIMIT", 3))
WARN_MODE = os.environ.get("WARN_MODE", "gmute")

if not WARN_MODE in ["gmute", "gban"]:
    WARN_MODE = "gmute"

GALERI_SURE = int(os.environ.get("GALERI_SURE", 60))

CHROME_DRIVER = os.environ.get("CHROME_DRIVER", None)
GOOGLE_CHROME_BIN = os.environ.get("GOOGLE_CHROME_BIN", None)

PLUGINID = os.environ.get("PLUGIN_CHANNEL_ID", None)
if not PLUGINID:
    PLUGIN_CHANNEL_ID = "me"
else:
    PLUGIN_CHANNEL_ID = int(PLUGINID)

OPEN_WEATHER_MAP_APPID = os.environ.get("OPEN_WEATHER_MAP_APPID", None)
WEATHER_DEFCITY = os.environ.get("WEATHER_DEFCITY", None)

ANTI_SPAMBOT = sb(os.environ.get("ANTI_SPAMBOT", "False"))
ANTI_SPAMBOT_SHOUT = sb(os.environ.get("ANTI_SPAMBOT_SHOUT", "False"))

YOUTUBE_API_KEY = os.environ.get("YOUTUBE_API_KEY", None)

COUNTRY = str(os.environ.get("COUNTRY", ""))
TZ_NUMBER = int(os.environ.get("TZ_NUMBER", 1))

CLEAN_WELCOME = sb(os.environ.get("CLEAN_WELCOME", "True"))

BIO_PREFIX = os.environ.get("BIO_PREFIX", "@BrendUserBot | ")
DEFAULT_BIO = os.environ.get("DEFAULT_BIO", None)

LASTFM_API = os.environ.get("LASTFM_API", None)
LASTFM_SECRET = os.environ.get("LASTFM_SECRET", None)
LASTFM_USERNAME = os.environ.get("LASTFM_USERNAME", None)
LASTFM_PASSWORD_PLAIN = os.environ.get("LASTFM_PASSWORD", None)
LASTFM_PASS = md5(LASTFM_PASSWORD_PLAIN)
if LASTFM_API and LASTFM_SECRET and LASTFM_USERNAME and LASTFM_PASS:
    lastfm = LastFMNetwork(api_key=LASTFM_API,
                           api_secret=LASTFM_SECRET,
                           username=LASTFM_USERNAME,
                           password_hash=LASTFM_PASS)
else:
    lastfm = None

G_DRIVE_CLIENT_ID = os.environ.get("G_DRIVE_CLIENT_ID", None)
G_DRIVE_CLIENT_SECRET = os.environ.get("G_DRIVE_CLIENT_SECRET", None)
G_DRIVE_AUTH_TOKEN_DATA = os.environ.get("G_DRIVE_AUTH_TOKEN_DATA", None)
GDRIVE_FOLDER_ID = os.environ.get("GDRIVE_FOLDER_ID", None)
TEMP_DOWNLOAD_DIRECTORY = os.environ.get("TMP_DOWNLOAD_DIRECTORY",
                                         "./downloads")
                    
BOT_TOKEN = os.environ.get("BOT_TOKEN", None)
BOT_USERNAME = os.environ.get("BOT_USERNAME", None)

ALIVE_NAME = os.environ.get("ALIVE_NAME",".set var ALIVE_NAME <istifad…ô√ßi adƒ±nƒ±zƒ± yazƒ±n>")
ALIVE_LOGO = os.environ.get("ALIVE_LOGO", "https://telegra.ph/file/d61b9172fc143fdfc86a2.gif")

CMD_HELP = {}
CMD_HELP_BOT = {}
PM_AUTO_BAN_LIMIT = int(os.environ.get("PM_AUTO_BAN_LIMIT", 4))

SPOTIFY_DC = os.environ.get("SPOTIFY_DC", None)
SPOTIFY_KEY = os.environ.get("SPOTIFY_KEY", None)

PAKET_ISMI = os.environ.get("PAKET_ISMI", "@BrendUserBot Paketi")

OTOMATIK_KATILMA = sb(os.environ.get("OTOMATIK_KATILMA", "True"))

PATTERNS = os.environ.get("PATTERNS", ".")
WHITELIST = [1081850094, 1561868122, 1894959920, 1801589805, 1125912905]

if not os.path.exists('bin'):
    os.mkdir('bin')

binaries = {
    "https://raw.githubusercontent.com/yshalsager/megadown/master/megadown":
    "bin/megadown",
    "https://raw.githubusercontent.com/yshalsager/cmrudl.py/master/cmrudl.py":
    "bin/cmrudl"
}

for binary, path in binaries.items():
    downloader = SmartDL(binary, path, progress_bar=False)
    downloader.start()
    os.chmod(path, 0o755)

# 'bot' deƒüi≈ükeni
if STRING_SESSION:
    bot = TelegramClient(StringSession(STRING_SESSION), API_KEY, API_HASH)
else:
    bot = TelegramClient("userbot", API_KEY, API_HASH)


if os.path.exists("learning-data-root.check"):
    os.remove("learning-data-root.check")
else:
    LOGS.info("Beyin yoxlanƒ±≈üƒ± faylƒ± yoxdur, alƒ±nƒ±r...")

URL = 'https://raw.githubusercontent.com/quiec/databasescape/master/learning-data-root.check'
with open('learning-data-root.check', 'wb') as load:
    load.write(get(URL).content)

async def check_botlog_chatid():
    if not BOTLOG_CHATID and LOGSPAMMER:
        LOGS.info(
            "X√ºsusi x…ôta siyahƒ±sƒ±nƒ±n aktivl…ô≈üm…ôsi √º√ß√ºn BOTLOG_CHATID d…ôy…ôrini doldurmalƒ±sƒ±nƒ±z.")
        quit(1)

    elif not BOTLOG_CHATID and BOTLOG:
        LOGS.info(
            "Giri≈ü etm…ôsi √º√ß√ºn BOTLOG_CHATID d…ôy…ôrini doldurmalƒ±sƒ±nƒ±z.")
        quit(1)

    elif not BOTLOG or not LOGSPAMMER:
        return

    entity = await bot.get_entity(BOTLOG_CHATID)
    if entity.default_banned_rights.send_messages:
        LOGS.info(
            "Hesabƒ±nƒ±zla BOTLOG_CHATID qrupuna mesaj g√∂nd…ôrm…ôk olmur."
            "Qrup ID-sini d√ºzg√ºn yazdƒ±ƒüƒ±nƒ±za …ômin olun.")
        quit(1)
        
if not BOT_TOKEN == None:
    tgbot = TelegramClient(
        "TG_BOT_TOKEN",
        api_id=API_KEY,
        api_hash=API_HASH
    ).start(bot_token=BOT_TOKEN)
else:
    tgbot = None

def butonlastir(sayfa, moduller):
    Satir = 5
    Kolon = 2
    
    moduller = sorted([modul for modul in moduller if not modul.startswith("_")])
    pairs = list(map(list, zip(moduller[::2], moduller[1::2])))
    if len(moduller) % 2 == 1:
        pairs.append([moduller[-1]])
    max_pages = ceil(len(pairs) / Satir)
    pairs = [pairs[i:i + Satir] for i in range(0, len(pairs), Satir)]
    butonlar = []
    for pairs in pairs[sayfa]:
        butonlar.append([
            custom.Button.inline("üî∏ " + pair, data=f"bilgi[{sayfa}]({pair})") for pair in pairs
        ])

    butonlar.append([custom.Button.inline("‚óÄÔ∏è Geri", data=f"sayfa({(max_pages - 1) if sayfa == 0 else (sayfa - 1)})"), custom.Button.inline("ƒ∞l…ôri ‚ñ∂Ô∏è", data=f"sayfa({0 if sayfa == (max_pages - 1) else sayfa + 1})")])
    return [max_pages, butonlar]

with bot:
    if OTOMATIK_KATILMA:
        try:
            bot(JoinChannelRequest("@BrendUserBot"))
            bot(JoinChannelRequest("@brendsup"))
        except:
            pass

    moduller = CMD_HELP
    me = bot.get_me()
    uid = me.id

    try:
        @tgbot.on(NewMessage(pattern='/start'))
        async def start_bot_handler(event):
            if not event.message.from_id == uid:
                await event.reply(f'`Salam m…ôn` @BrendUserbot`! M…ôn sahibim…ô k√∂m…ôk etm…ôk √º√ß√ºn burdayam, s…ôn…ô k√∂m…ôk ed…ô bilm…ôr…ôm. Ama s…ôn d…ô bir Brenduserbot i≈ül…ôd…ô bil…ôrs…ôn; Kanala bax` @BrendUserbot yada Support qrupuna @BrendSUP')
            else:
                await event.reply(f'`The Brand Userbot Super works‚ö°`')

        @tgbot.on(InlineQuery)  # pylint:disable=E0602
        async def inline_handler(event):
            builder = event.builder
            result = None
            query = event.text
            if event.query.user_id == uid and query == "@BrendUserBot":
                rev_text = query[::-1]
                veriler = (butonlastir(0, sorted(CMD_HELP)))
                result = await builder.article(
                    f"Sad…ôc…ô .alive komutu yoxlayƒ±n",
                    text=f"[Brend](https://t.me/BrendUserBot)** Userbot super i≈ül…ôyir‚ö°Ô∏è**\n\n**Y√ºkl…ôn…ôn Modul Sayƒ±:** `{len(CMD_HELP)}`\n**S…ôhif…ô:** 1/{veriler[0]}",
                    buttons=veriler[1],
                    link_preview=False
                )
            elif query.startswith("http"):
                parca = query.split(" ")
                result = builder.article(
                    "Fayl y√ºl…ôndi",
                    text=f"**Fayl uƒüurla {parca[2]} saytƒ±na y√ºkl…ôndi!**\n\nY√ºkl…ôm…ô vaxtƒ±: {parca[1][:3]} saniy…ô\n[‚Äè‚Äè‚Äé ‚Äé]({parca[0]})",
                    buttons=[
                        [custom.Button.url('URL', parca[0])]
                    ],
                    link_preview=True
                )
            else:
                result = builder.article(
                    "@BrendUserBot",
                    text="""@Brenduserbot'u yoxlayƒ±n!
Hesabƒ±nƒ±zƒ± bota √ßevir…ô v…ô istifad…ô ed…ô bil…ôrsiniz. Unutmayƒ±n, ba≈üqasƒ±nƒ±n botunu idar…ô ed…ô bilm…ôzsiniz! B√ºt√ºn qura≈üdƒ±rma detallarƒ± a≈üaƒüƒ±dakƒ± GitHub adresind…ôn izah olunur.""",
                    buttons=[
                        [custom.Button.url("üì°Kanala Qatƒ±l", "https://t.me/BrendUserBot"), custom.Button.url(
                            "Support Qrupuüë®üèª‚Äçüîß", "https://t.me/BrendSup")],
                        [custom.Button.url(
                            "‚ö°Plugin Kanalƒ±üí†", "https://t.me/BrendPlugin")]
                    ],
                    link_preview=False
                )
            await event.answer([result] if result else None)

        @tgbot.on(callbackquery.CallbackQuery(data=compile(b"sayfa\((.+?)\)")))
        async def sayfa(event):
            if not event.query.user_id == uid: 
                return await event.answer("‚ùå Hey! Mesajlarƒ±mƒ± d√ºz…ôltm…ôy…ô √ßalƒ±≈ümayƒ±n! ≈û…ôxsi hesabƒ±nƒ±za @BrendUserBot qurun.", cache_time=0, alert=True)
            sayfa = int(event.data_match.group(1).decode("UTF-8"))
            veriler = butonlastir(sayfa, CMD_HELP)
            await event.edit(
                f"[Brend](https://t.me/BrendUserBot)** Userbot super i≈ül…ôyir‚ö°Ô∏è**\n\n**Y√ºkl…ôn…ôn Modul Sayƒ±:** `{len(CMD_HELP)}`\n**S…ôhif…ô:** {sayfa + 1}/{veriler[0]}",
                buttons=veriler[1],
                link_preview=False
            )
        
        @tgbot.on(callbackquery.CallbackQuery(data=compile(b"bilgi\[(\d*)\]\((.*)\)")))
        async def bilgi(event):
            if not event.query.user_id == uid: 
                return await event.answer("‚ùå Hey! Mesajlarƒ±mƒ± d√ºz…ôltm…ôy…ô √ßalƒ±≈ümayƒ±n! ≈û…ôxsi hesabƒ±nƒ±za @BrendUserBot qurun.", cache_time=0, alert=True)

            sayfa = int(event.data_match.group(1).decode("UTF-8"))
            komut = event.data_match.group(2).decode("UTF-8")
            try:
                butonlar = [custom.Button.inline("üîπ " + cmd[0], data=f"komut[{komut}[{sayfa}]]({cmd[0]})") for cmd in CMD_HELP_BOT[komut]['commands'].items()]
            except KeyError:
                return await event.answer("‚ùå Bu modul √º√ß√ºn he√ß bir t…ôsvir yazƒ±lmayƒ±b.", cache_time=0, alert=True)

            butonlar = [butonlar[i:i + 2] for i in range(0, len(butonlar), 2)]
            butonlar.append([custom.Button.inline("‚óÄÔ∏è Geri", data=f"sayfa({sayfa})")])
            await event.edit(
                f"**üìó Fayl:** `{komut}`\n**üî¢ ∆èmr sayƒ±:** `{len(CMD_HELP_BOT[komut]['commands'])}`",
                buttons=butonlar,
                link_preview=False
            )
        
        @tgbot.on(callbackquery.CallbackQuery(data=compile(b"komut\[(.*)\[(\d*)\]\]\((.*)\)")))
        async def komut(event):
            if not event.query.user_id == uid: 
                return await event.answer("‚ùå Hey! Mesajlarƒ±mƒ± d√ºz…ôltm…ôy…ô √ßalƒ±≈ümayƒ±n! ≈û…ôxsi hesabƒ±nƒ±za @BrendUserBot qurun.", cache_time=0, alert=True)

            cmd = event.data_match.group(1).decode("UTF-8")
            sayfa = int(event.data_match.group(2).decode("UTF-8"))
            komut = event.data_match.group(3).decode("UTF-8")

            result = f"**üìó Fayl:** `{cmd}`\n"
            if CMD_HELP_BOT[cmd]['info']['info'] == '':
                if not CMD_HELP_BOT[cmd]['info']['warning'] == '':
                    result += f"**‚¨áÔ∏è R…ôsmi:** {'‚úÖ' if CMD_HELP_BOT[cmd]['info']['official'] else '‚ùå'}\n"
                    result += f"**‚ö†Ô∏è Diqq…ôt:** {CMD_HELP_BOT[cmd]['info']['warning']}\n\n"
                else:
                    result += f"**‚¨áÔ∏è R…ôsmi:** {'‚úÖ' if CMD_HELP_BOT[cmd]['info']['official'] else '‚ùå'}\n\n"
            else:
                result += f"**‚¨áÔ∏è R…ôsmi:** {'‚úÖ' if CMD_HELP_BOT[cmd]['info']['official'] else '‚ùå'}\n"
                if not CMD_HELP_BOT[cmd]['info']['warning'] == '':
                    result += f"**‚ö†Ô∏è Diqq…ôt:** {CMD_HELP_BOT[cmd]['info']['warning']}\n"
                result += f"**‚ÑπÔ∏è M…ôlumat:** {CMD_HELP_BOT[cmd]['info']['info']}\n\n"

            command = CMD_HELP_BOT[cmd]['commands'][komut]
            if command['params'] is None:
                result += f"**üõ† ∆èmr:** `{PATTERNS[:1]}{command['command']}`\n"
            else:
                result += f"**üõ† ∆èmr:** `{PATTERNS[:1]}{command['command']} {command['params']}`\n"
                
            if command['example'] is None:
                result += f"**üí¨ A√ßƒ±qlama:** `{command['usage']}`\n\n"
            else:
                result += f"**üí¨ A√ßƒ±lama:** `{command['usage']}`\n"
                result += f"**‚å®Ô∏è N√ºmuna:** `{PATTERNS[:1]}{command['example']}`\n\n"

            await event.edit(
                result,
                buttons=[custom.Button.inline("‚óÄÔ∏è Geri", data=f"bilgi[{sayfa}]({cmd})")],
                link_preview=False
            )
    except Exception as e:
        print(e)
        LOGS.info(
            "S…ôtir daxilind…ô k√∂m…ôk botunuzda deaktiv edildi."
            "Aktivl…ô≈üdirm…ôk √º√ß√ºn bot token t…ôyin edin v…ô botunuzda s…ôtir i√ßi rejimini aktivl…ô≈üdirin."
            "Bunun xaricind…ô bir problem olduƒüunu d√º≈ü√ºn√ºrs√ºn√ºzs…ô, biziml…ô …ôlaq…ô saxlayƒ±n. @BrendSUP"
        )

    try:
        bot.loop.run_until_complete(check_botlog_chatid())
    except:
        LOGS.info(
            "BOTLOG_CHATID yenil…ôm…ôyiniz t√∂vsiyy…ô olunur. "
        )
        quit(1)


# Qlobal D…ôyi≈ü…ônl…ôr
SON_GORULME = 0
COUNT_MSG = 0
USERS = {}
HUSU = uid
BRAIN_CHECKER = []
COUNT_PM = {}
LASTMSG = {}
ENABLE_KILLME = True
ISAFK = False
AFKREASON = None
ZALG_LIST = [[
    "Ãñ",
    " Ãó",
    " Ãò",
    " Ãô",
    " Ãú",
    " Ãù",
    " Ãû",
    " Ãü",
    " Ã†",
    " Ã§",
    " Ã•",
    " Ã¶",
    " Ã©",
    " Ã™",
    " Ã´",
    " Ã¨",
    " Ã≠",
    " ÃÆ",
    " ÃØ",
    " Ã∞",
    " Ã±",
    " Ã≤",
    " Ã≥",
    " Ãπ",
    " Ã∫",
    " Ãª",
    " Ãº",
    " ÕÖ",
    " Õá",
    " Õà",
    " Õâ",
    " Õç",
    " Õé",
    " Õì",
    " Õî",
    " Õï",
    " Õñ",
    " Õô",
    " Õö",
    " ",
],
    [
    " Ãç", " Ãé", " ÃÑ", " ÃÖ", " Ãø", " Ãë", " ÃÜ", " Ãê", " Õí", " Õó",
    " Õë", " Ãá", " Ãà", " Ãä", " ÕÇ", " ÕÉ", " ÕÑ", " Õä", " Õã", " Õå",
    " ÃÉ", " ÃÇ", " Ãå", " Õê", " ÃÅ", " Ãã", " Ãè", " ÃΩ", " Ãâ", " Õ£",
    " Õ§", " Õ•", " Õ¶", " Õß", " Õ®", " Õ©", " Õ™", " Õ´", " Õ¨", " Õ≠",
    " ÕÆ", " ÕØ", " Ãæ", " Õõ", " ÕÜ", " Ãö"
],
    [
    " Ãï",
    " Ãõ",
    " ÕÄ",
    " ÕÅ",
    " Õò",
    " Ã°",
    " Ã¢",
    " Ãß",
    " Ã®",
    " Ã¥",
    " Ãµ",
    " Ã∂",
    " Õú",
    " Õù",
    " Õû",
    " Õü",
    " Õ†",
    " Õ¢",
    " Ã∏",
    " Ã∑",
    " Õ°",
]]
