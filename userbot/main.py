import importlib
from importlib import import_module
from sqlite3 import connect
import os
import requests
from telethon.tl.types import InputMessagesFilterDocument
from telethon.errors.rpcerrorlist import PhoneNumberInvalidError
from telethon.tl.functions.channels import GetMessagesRequest
from . import BRAIN_CHECKER, LOGS, bot, PLUGIN_CHANNEL_ID, CMD_HELP, LANGUAGE, BREND_VERSION, PATTERNS
from .modules import ALL_MODULES
import userbot.modules.sql_helper.mesaj_sql as MSJ_SQL
import userbot.modules.sql_helper.galeri_sql as GALERI_SQL
from pySmartDL import SmartDL
from telethon.tl import functions

from random import choice
import chromedriver_autoinstaller
from json import loads, JSONDecodeError
import re
import userbot.cmdhelp

DIZCILIK_STR = [
    "Stikeri Fƒ±rladƒ±ram...",
    "Ya≈üasƒ±n fƒ±rlatmaq...",
    "Bu stikeri √∂z paketim…ô d…ôv…ôt edir…ôm...",
    "Bunu fƒ±rlatmalƒ±yam...",
    "Hey bu g√∂z…ôl bir stikerdi!\nBir an √∂nc…ô fƒ±rladƒ±ram..",
    "Stikerinizi fƒ±rladƒ±r…ôm\nhahaha.",
    "Hey bura bax. (‚òâÔΩ°‚òâ)!‚Üí\nM…ôn bunu fƒ±rladƒ±ram...",
    "G√ºll…ôr qƒ±rmƒ±zƒ± b…ôn√∂v≈ü…ôl…ôr mavi, bu stikeri paketim…ô …ôlav…ô ed…ôr…ôk dava d…ôbd…ôb…ôli olacaƒüam...",
    "Stiker saxlanƒ±lƒ±r...",
    "Bu stikeri uje sahipl…ôndim... ",
]

AFKSTR = [
    "M…ôn indi t…ôl…ôsir…ôm, daha sonra bir mesaj g√∂nd…ôr…ô bilm…ôzs…ôn?üò¨\nOnsuz da yen…ô g…ôl…ôc…ôm.",
    "Yazdƒ±ƒüƒ±nƒ±z ≈ü…ôxs hal-hazƒ±rda mesajƒ±nƒ±za cavab vermir.\nXai≈ü edirik biraz sonra mesaj yazƒ±n!",
    "Bir ne√ß…ô d…ôqiq…ôd…ôn sonra g…ôl…ôc…ôm. Ancaq g…ôlm…ôs…ôm ...\ndaha √ßox g√∂zl…ôyin.",
    "M…ôn indi burada deyil…ôm, y…ôqin ki, ba≈üqa bir yerd…ôy…ôm.\n{last_second}saniy…ô …ôvv…ôl burda idi",
    "Gets…ôn gedirs…ôns…ô sevgili yar amma unutma.\nBirazdan g…ôl…ôc…ôm",
    "B…ôz…ôn h…ôyatda …ôn yax≈üƒ± ≈üeyl…ôr g√∂zl…ôm…ôy…ô d…ôy…ôr‚Ä¶\nS…ônd…ô m…ônim g…ôlm…ôyimi g√∂zl…ô.",
    "D…ôrs…ô ged…ôn bir u≈üaq yƒ±xƒ±ldƒ± buz √ºst…ô. Sonrada durub yoluna davam el…ôdi.\nSahibim burda deyil amma ist…ôs…ôn biz s…ôninl…ô s√∂hb…ôt ed…ô bil…ôrik.",
    "H…ôl…ôd…ô burda olmadƒ±ƒüƒ±mƒ± anlamadƒ±n?\nS…ônid…ô qƒ±namƒ±ram e≈ü≈ü…ôy n…ô bilir z…ôf…ôran n…ôdi?üòÇ.\nBirazdan g…ôl…ôr…ômüòè\n\n",
    "A ki≈üi saa dedim yazma!\nBurda deyil…ômd…ô aaaa...",
    "Sahibim burda yoxdu m…ôn…ô dediki sevgilisinn…ôn bezib v…ô yeni bir sevgili tapmaƒüa gedir",
    "M…ôn hazƒ±rda klaviaturadan uzaƒüam, ancaq ekranda kifay…ôt q…ôd…ôr y√ºks…ôk s…ôsl…ô qƒ±≈üqƒ±rƒ±rsan, s…ôni e≈üid…ôr…ôm.",
    "Jizni varam {mention}\nQapƒ±ya ged…ôn yol ---->\n g√∂zl…ô birazdan g…ôl…ôc…ôm:)",
    "Sahibim axƒ±rƒ±ncƒ± d…ôf…ô bu t…ôr…ôf getdi\n<----\nS…ônd…ô arxasƒ±yca qa√ß b…ôlk…ô √ßata bildin.",
    "Xahi≈ü edir…ôm bir mesaj saxlayƒ±n v…ô o mesaj m…ôni indi olduƒüumdan daha d…ôy…ôrli hiss etdirsin.",
    "Sahibim burada deyil s…ônd…ô m…ôn…ô yazmaƒüƒ± dayandƒ±r.",
    "Burda olsaydƒ±m,\nSiz…ô harada olduƒüumu dey…ôrdim.\n\nAmma m…ôn deyil…ôm,\nqayƒ±danda m…ônd…ôn soru≈ü...",
    "M…ôn uzaqdayam!\nN…ô vaxt qayƒ±dacaƒüƒ±mƒ±da bilmir…ôm !\n√úmid varam bir ne√ß…ô d…ôqiq…ôy…ô.",
    "Baƒüƒ±≈ülayƒ±n, sahibim burada deyil.\nO g…ôl…ôn…ô q…ôd…ôr m…ôniml…ô danƒ±≈üa bil…ôrs…ôn.\nSahibim sonra siz…ô qayƒ±dacaq.",
    "G√ºman edir…ôm ki, bir mesaj g√∂zl…ôyirdiniz!",
    "H…ôyat √ßox qƒ±sadƒ±r, edil…ô bilin…ôc…ôk √ßox ≈üey var...\nOnlardan birini edir…ôm...",
    "Bu q…ôd…ôr z…ôhl…ô t√∂k…ôn olduƒüunu bilmirdim\nSAHƒ∞Bƒ∞M\nBURDA\nDEYƒ∞L!!!",
]

UNAPPROVED_MSG = ("üó£Ô∏è`Hey,` {mention}`! M…ôn sahibimin Brend UserBot-uyam.`ü§ñ\n\n"
                  "üìù`Sahibim s…ôn…ô PM-…ô yazma icaz…ôsi verm…ôdi`‚ùå"
                  "‚è±Ô∏è`Xahi≈ü edir…ôm sahibimin siz…ô icaz…ô verm…ôsini g√∂zl…ôyin`üòä\n`"
                  "ü§®`∆èg…ôr yazmaƒüa davam ets…ôniz sizi …ông…ôll…ôm…ôli olacaƒüam`üòï\n"
                  "üòå`G√∂zl…ôm…ôyi se√ßdiyiniz √º√ß√ºn t…ô≈ü…ôkk√ºrl…ôrü§ç.`"
                  "‚ö°H√∂rm…ôtl…ô: @BrendUserbot ü§ñ")

DB = connect("learning-data-root.check")
CURSOR = DB.cursor()
CURSOR.execute("""SELECT * FROM BRAIN1""")
ALL_ROWS = CURSOR.fetchall()
INVALID_PH = '\nX∆èTA: Daxil olunan telefon n√∂mr…ôsi yanlƒ±≈üdƒ±r' \
             '\n  K√∂m…ôk: √ñlk…ô kodunu istifad…ô n√∂mr…ôni daxil edin.' \
             '\n       Telefon n√∂mr…ônizi t…ôkrar yoxlayƒ±n'

for i in ALL_ROWS:
    BRAIN_CHECKER.append(i[0])
connect("learning-data-root.check").close()

def extractCommands(file):
    FileRead = open(file, 'r').read()
    
    if '/' in file:
        file = file.split('/')[-1]

    Pattern = re.findall(r"@register\(.*pattern=(r|)\"(.*)\".*\)", FileRead)
    Komutlar = []


    if re.search(r'CmdHelp\(.*\)', FileRead):
        pass
    else:
        dosyaAdi = file.replace('.py', '')
        CmdHelp = userbot.cmdhelp.CmdHelp(dosyaAdi, False)

        for Command in Pattern:
            Command = Command[1]
            if Command == '' or len(Command) <= 1:
                continue
            Komut = re.findall("(^.*[a-zA-Z0-9≈üƒü√º√∂√ßƒ±]\w)", Command)
            if (len(Komut) >= 1) and (not Komut[0] == ''):
                Komut = Komut[0]
                if Komut[0] == '^':
                    KomutStr = Komut[1:]
                    if KomutStr[0] == '.':
                        KomutStr = KomutStr[1:]
                    Komutlar.append(KomutStr)
                else:
                    if Command[0] == '^':
                        KomutStr = Command[1:]
                        if KomutStr[0] == '.':
                            KomutStr = KomutStr[1:]
                        else:
                            KomutStr = Command
                        Komutlar.append(KomutStr)
             #Brend
            Brendpy = re.search('\"\"\"BRENDPY(.*)\"\"\"', FileRead, re.DOTALL)
            if not Brendpy == None:
                Brendpy = Brendpy.group(0)
                for Satir in Brendpy.splitlines():
                    if (not '"""' in Satir) and (':' in Satir):
                        Satir = Satir.split(':')
                        Isim = Satir[0]
                        Deger = Satir[1][1:]
                                
                        if Isim == 'INFO':
                            CmdHelp.add_info(Deger)
                        elif Isim == 'WARN':
                            CmdHelp.add_warning(Deger)
                        else:
                            CmdHelp.set_file_info(Isim, Deger)
            for Komut in Komutlar:

                CmdHelp.add_command(Komut, None, 'Bu plugin k…ônardan y√ºkl…ônmi≈üdir. H…ôrhansƒ±sa bir a√ßƒ±qlama tapƒ±lmadƒ±.')
            CmdHelp.add()

try:
    bot.start()
    idim = bot.get_me().id
    brendbl = requests.get('https://gitlab.com/brenduserbot/brend-userbot/-/raw/master/brendblacklist.json').json()
    if idim in brendbl:
        bot.disconnect()

    try:
        chromedriver_autoinstaller.install()
    except:
        pass
    GALERI = {}

    PLUGIN_MESAJLAR = {}
    ORJ_PLUGIN_MESAJLAR = {"alive": "` Brend Userbot super i≈ül…ôyir‚ö°`", "afk": f"`{str(choice(AFKSTR))}`", "kickme": "`√ñz√ºn√ºzd…ôn muƒüayat olun m…ôn gedir…ômü§†`", "pm": UNAPPROVED_MSG, "dƒ±zcƒ±": str(choice(DIZCILIK_STR)), "ban": "{mention}`, qadaƒüan edildi!`", "mute": "{mention}`, s…ôssiz…ô alƒ±ndƒ±`", "approve": "{mention}`, m…ôn…ô mesaj g√∂nd…ôr…ô bil…ôrs…ôn!`", "disapprove": "{mention}`, Bundan sonra m…ôn…ô mesaj g√∂nd…ôr…ô bilm…ôzs…ôn!`", "block": "{mention}`, …ông…ôll…ôndin!`"}

    PLUGIN_MESAJLAR_TURLER = ["alive", "afk", "kickme", "pm", "dƒ±zcƒ±", "ban", "mute", "approve", "disapprove", "block"]
    for mesaj in PLUGIN_MESAJLAR_TURLER:
        dmsj = MSJ_SQL.getir_mesaj(mesaj)
        if dmsj == False:
            PLUGIN_MESAJLAR[mesaj] = ORJ_PLUGIN_MESAJLAR[mesaj]
        else:
            if dmsj.startswith("MEDYA_"):
                medya = int(dmsj.split("MEDYA_")[1])
                medya = bot.get_messages(PLUGIN_CHANNEL_ID, ids=medya)

                PLUGIN_MESAJLAR[mesaj] = medya
            else:
                PLUGIN_MESAJLAR[mesaj] = dmsj
    if not PLUGIN_CHANNEL_ID == None:
        LOGS.info("Pluginl…ôr Y√ºkl…ônir")
        try:
            KanalId = bot.get_entity(PLUGIN_CHANNEL_ID)
        except:
            KanalId = "me"

        for plugin in bot.iter_messages(KanalId, filter=InputMessagesFilterDocument):
            if plugin.file.name and (len(plugin.file.name.split('.')) > 1) \
                and plugin.file.name.split('.')[-1] == 'py':
                Split = plugin.file.name.split('.')

                if not os.path.exists("./userbot/modules/" + plugin.file.name):
                    dosya = bot.download_media(plugin, "./userbot/modules/")
                else:
                    LOGS.info("Bu Plugin Onsuz Y√ºkl…ônib" + plugin.file.name)
                    extractCommands('./userbot/modules/' + plugin.file.name)
                    dosya = plugin.file.name
                    continue 
                
                try:
                    spec = importlib.util.spec_from_file_location("userbot.modules." + Split[0], dosya)
                    mod = importlib.util.module_from_spec(spec)

                    spec.loader.exec_module(mod)
                except Exception as e:
                    LOGS.info(f"`Y√ºkl…ôm…ô uƒüursuz oldu! Plugin x…ôtalƒ±dƒ±r.\n\nX…ôta: {e}`")

                    try:
                        plugin.delete()
                    except:
                        pass

                    if os.path.exists("./userbot/modules/" + plugin.file.name):
                        os.remove("./userbot/modules/" + plugin.file.name)
                    continue
                extractCommands('./userbot/modules/' + plugin.file.name)
    else:
        bot.send_message("me", f"`Xai≈ü edirik, pluginl…ôrin qalƒ±cƒ± olmasƒ± √º√ß√ºn PLUGIN_CHANNEL_ID'i yerl…ô≈üdirin.`")
except PhoneNumberInvalidError:
    print(INVALID_PH)
    exit(1)

async def FotoDegistir (foto):
    FOTOURL = GALERI_SQL.TUM_GALERI[foto].foto
    r = requests.get(FOTOURL)

    with open(str(foto) + ".jpg", 'wb') as f:
        f.write(r.content)    
    file = await bot.upload_file(str(foto) + ".jpg")
    try:
        await bot(functions.photos.UploadProfilePhotoRequest(
            file
        ))
        return True
    except:
        return False

for module_name in ALL_MODULES:
    imported_module = import_module("userbot.modules." + module_name)

LOGS.info("Botunuz problemsiz ≈ü…ôkild…ô i≈ül…ôyir! h…ôr-hansƒ±sa bir s√∂hb…ôt…ô .alive yazaraq yoxlaya bil…ôrsiniz."
          "K√∂m…ôy…ô ehtiyacƒ±nƒ±z varsa, D…ôst…ôk qrupumuza g…ôlin t.me/BrendSupport")
LOGS.info(f"Bot versƒ±yanƒ±z: Brend {BREND_VERSION}")

"""
if len(argv) not in (1, 3, 4):
    bot.disconnect()
else:
"""
bot.run_until_disconnected()
